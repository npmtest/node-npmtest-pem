{"/home/travis/build/npmtest/node-npmtest-pem/test.js":"/* istanbul instrument in package npmtest_pem */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-pem/lib.npmtest_pem.js":"/* istanbul instrument in package npmtest_pem */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_pem = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_pem = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-pem/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-pem && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_pem */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_pem\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_pem.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_pem.rollup.js'] =\n            local.assetsDict['/assets.npmtest_pem.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_pem.__dirname + '/lib.npmtest_pem.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-pem/node_modules/pem/lib/pem.js":"'use strict';\n\nvar spawn = require('child_process').spawn;\nvar pathlib = require('path');\nvar fs = require('fs');\nvar net = require('net');\nvar crypto = require('crypto');\nvar which = require('which');\nvar osTmpdir = require('os-tmpdir');\nvar pathOpenSSL;\nvar tempDir = process.env.PEMJS_TMPDIR || osTmpdir();\n\nmodule.exports.createPrivateKey = createPrivateKey;\nmodule.exports.createDhparam = createDhparam;\nmodule.exports.createCSR = createCSR;\nmodule.exports.createCertificate = createCertificate;\nmodule.exports.readCertificateInfo = readCertificateInfo;\nmodule.exports.getPublicKey = getPublicKey;\nmodule.exports.getFingerprint = getFingerprint;\nmodule.exports.getModulus = getModulus;\nmodule.exports.getDhparamInfo = getDhparamInfo;\nmodule.exports.createPkcs12 = createPkcs12;\nmodule.exports.readPkcs12 = readPkcs12;\nmodule.exports.verifySigningChain = verifySigningChain;\nmodule.exports.config = config;\n\nvar KEY_START = '-----BEGIN PRIVATE KEY-----';\nvar KEY_END = '-----END PRIVATE KEY-----';\nvar RSA_KEY_START = '-----BEGIN RSA PRIVATE KEY-----';\nvar RSA_KEY_END = '-----END RSA PRIVATE KEY-----';\nvar ENCRYPTED_KEY_START = '-----BEGIN ENCRYPTED PRIVATE KEY-----';\nvar ENCRYPTED_KEY_END = '-----END ENCRYPTED PRIVATE KEY-----';\nvar CERT_START = '-----BEGIN CERTIFICATE-----';\nvar CERT_END = '-----END CERTIFICATE-----';\n\n// PUBLIC API\n\n/**\n * Creates a private key\n *\n * @param {Number} [keyBitsize=2048] Size of the key, defaults to 2048bit\n * @param {Object} [options] object of cipher and password {cipher:'aes128',password:'xxx'}, defaults empty object\n * @param {Function} callback Callback function with an error object and {key}\n */\nfunction createPrivateKey(keyBitsize, options, callback) {\n    var clientKeyPassword;\n    if (!callback && !options && typeof keyBitsize === 'function') {\n        callback = keyBitsize;\n        keyBitsize = undefined;\n        options = {};\n    }\n    else if (!callback && keyBitsize && typeof options === 'function') {\n        callback = options;\n        options = {};\n    }\n\n    keyBitsize = Number(keyBitsize) || 2048;\n\n    var params = ['genrsa',\n        '-rand',\n        '/var/log/mail:/var/log/messages'\n    ];\n    var cipher = [\"aes128\", \"aes192\", \"aes256\", \"camellia128\", \"camellia192\", \"camellia256\", \"des\", \"des3\", \"idea\"];\n\n    if (options && options.cipher && ( -1 !== Number(cipher.indexOf(options.cipher)) ) && options.password){\n        clientKeyPassword = pathlib.join(tempDir, crypto.randomBytes(20).toString('hex'));\n        fs.writeFileSync(clientKeyPassword, options.password);\n        params.push( '-' + options.cipher );\n        params.push( '-passout' );\n        params.push( 'file:' + clientKeyPassword );\n    }\n\n    params.push(keyBitsize);\n\n    execOpenSSL(params, 'RSA PRIVATE KEY', function(sslErr, key) {\n        function done(err) {\n            if (err) {\n                return callback(err);\n            }\n            callback(null, {\n                key: key\n            });\n        }\n\n        if (clientKeyPassword) {\n            fs.unlink(clientKeyPassword, function(fsErr) {\n                done(sslErr || fsErr);\n            });\n        }\n        else {\n            done(sslErr);\n        }\n    });\n}\n\n\n/**\n * Creates a dhparam key\n *\n * @param {Number} [keyBitsize=512] Size of the key, defaults to 512bit\n * @param {Function} callback Callback function with an error object and {dhparam}\n */\nfunction createDhparam(keyBitsize, callback) {\n    if (!callback && typeof keyBitsize === 'function') {\n        callback = keyBitsize;\n        keyBitsize = undefined;\n    }\n\n    keyBitsize = Number(keyBitsize) || 512;\n\n    var params = ['dhparam',\n        '-outform',\n        'PEM',\n        keyBitsize\n    ];\n\n    execOpenSSL(params, 'DH PARAMETERS', function(error, dhparam) {\n        if (error) {\n            return callback(error);\n        }\n        return callback(null, {\n            dhparam: dhparam\n        });\n    });\n}\n\n/**\n * Creates a Certificate Signing Request\n *\n * If client key is undefined, a new key is created automatically. The used key is included\n * in the callback return as clientKey\n *\n * @param {Object} [options] Optional options object\n * @param {String} [options.clientKey] Optional client key to use\n * @param {Number} [options.keyBitsize] If clientKey is undefined, bit size to use for generating a new key (defaults to 2048)\n * @param {String} [options.hash] Hash function to use (either md5 sha1 or sha256, defaults to sha256)\n * @param {String} [options.country] CSR country field\n * @param {String} [options.state] CSR state field\n * @param {String} [options.locality] CSR locality field\n * @param {String} [options.organization] CSR organization field\n * @param {String} [options.organizationUnit] CSR organizational unit field\n * @param {String} [options.commonName='localhost'] CSR common name field\n * @param {String} [options.emailAddress] CSR email address field\n * @param {String} [options.csrConfigFile] CSR config file\n * @param {Array}  [options.altNames] is a list of subjectAltNames in the subjectAltName field\n * @param {Function} callback Callback function with an error object and {csr, clientKey}\n */\nfunction createCSR(options, callback) {\n    if (!callback && typeof options === 'function') {\n        callback = options;\n        options = undefined;\n    }\n\n    options = options || {};\n\n    // http://stackoverflow.com/questions/14089872/why-does-node-js-accept-ip-addresses-in-certificates-only-for-san-not-for-cn\n    if (options.commonName && (net.isIPv4(options.commonName) || net.isIPv6(options.commonName))) {\n        if (!options.altNames) {\n            options.altNames = [options.commonName];\n        } else if (options.altNames.indexOf(options.commonName) === -1) {\n            options.altNames = options.altNames.concat([options.commonName]);\n        }\n    }\n\n    if (!options.clientKey) {\n        createPrivateKey(options.keyBitsize || 2048, function(error, keyData) {\n            if (error) {\n                return callback(error);\n            }\n            options.clientKey = keyData.key;\n            createCSR(options, callback);\n        });\n        return;\n    }\n\n    var params = ['req',\n        '-new',\n        '-' + (options.hash || 'sha256')\n    ];\n\n    if (options.csrConfigFile) {\n        params.push('-config');\n        params.push(options.csrConfigFile);\n    }\n    else {\n        params.push('-subj');\n        params.push(generateCSRSubject(options));\n    }\n\n    params.push('-key');\n    params.push('--TMPFILE--');\n\n    var tmpfiles = [options.clientKey];\n    var config = null;\n\n    if (options.altNames && Array.isArray(options.altNames) && options.altNames.length) {\n        params.push('-extensions');\n        params.push('v3_req');\n        params.push('-config');\n        params.push('--TMPFILE--');\n        var altNamesRep = [];\n        for (var i = 0; i < options.altNames.length; i++) {\n            altNamesRep.push((net.isIP(options.altNames[i]) ? 'IP' : 'DNS') + '.' + (i + 1) + ' = ' + options.altNames[i]);\n        }\n\n        tmpfiles.push(config = [\n            '[req]',\n            'req_extensions = v3_req',\n            'distinguished_name = req_distinguished_name',\n            '[v3_req]',\n            'subjectAltName = @alt_names',\n            '[alt_names]',\n            altNamesRep.join('\\n'),\n            '[req_distinguished_name]',\n            'commonName = Common Name',\n            'commonName_max = 64',\n        ].join('\\n'));\n    }\n\n    var passwordFilePath = null;\n    if (options.clientKeyPassword) {\n        passwordFilePath = pathlib.join(tempDir, crypto.randomBytes(20).toString('hex'));\n        fs.writeFileSync(passwordFilePath, options.clientKeyPassword);\n        params.push('-passin');\n        params.push('file:' + passwordFilePath);\n    }\n\n    execOpenSSL(params, 'CERTIFICATE REQUEST', tmpfiles, function(sslErr, data) {\n        function done(err) {\n            if (err) {\n                return callback(err);\n            }\n            callback(null, {\n                csr: data,\n                config: config,\n                clientKey: options.clientKey\n            });\n        }\n        if (passwordFilePath) {\n            fs.unlink(passwordFilePath, function (fsErr) {\n                done(sslErr || fsErr);\n            });\n        }\n        else {\n            done(sslErr);\n        }\n    });\n}\n\n/**\n * Creates a certificate based on a CSR. If CSR is not defined, a new one\n * will be generated automatically. For CSR generation all the options values\n * can be used as with createCSR.\n *\n * @param {Object} [options] Optional options object\n * @param {String} [options.serviceKey] Private key for signing the certificate, if not defined a new one is generated\n * @param {String} [options.serviceKeyPassword] Password of the service key\n * @param {Boolean} [options.selfSigned] If set to true and serviceKey is not defined, use clientKey for signing\n * @param {String} [options.hash] Hash function to use (either md5 sha1 or sha256, defaults to sha256)\n * @param {String} [options.csr] CSR for the certificate, if not defined a new one is generated\n * @param {Number} [options.days] Certificate expire time in days\n * @param {String} [options.clientKeyPassword] Password of the client key\n * @param {String} [options.extFile] extension config file - without '-extensions v3_req'\n * @param {String} [options.config] extension config file - with '-extensions v3_req'\n * @param {Function} callback Callback function with an error object and {certificate, csr, clientKey, serviceKey}\n */\nfunction createCertificate(options, callback) {\n    if (!callback && typeof options === 'function') {\n        callback = options;\n        options = undefined;\n    }\n\n    options = options || {};\n\n    if (!options.csr) {\n        createCSR(options, function(error, keyData) {\n            if (error) {\n                return callback(error);\n            }\n            options.csr = keyData.csr;\n            options.config = keyData.config;\n            options.clientKey = keyData.clientKey;\n            createCertificate(options, callback);\n        });\n        return;\n    }\n\n    if (!options.serviceKey) {\n\n        if (options.selfSigned) {\n            options.serviceKey = options.clientKey;\n        } else {\n            createPrivateKey(options.keyBitsize || 2048, function(error, keyData) {\n                if (error) {\n                    return callback(error);\n                }\n                options.serviceKey = keyData.key;\n                createCertificate(options, callback);\n            });\n            return;\n        }\n    }\n\n    var params = ['x509',\n        '-req',\n        '-' + (options.hash || 'sha256'),\n        '-days',\n        Number(options.days) || '365',\n        '-in',\n        '--TMPFILE--'\n    ];\n    var tmpfiles = [options.csr];\n\n    if (options.serviceCertificate) {\n\n        params.push('-CA');\n        params.push('--TMPFILE--');\n        params.push('-CAkey');\n        params.push('--TMPFILE--');\n        if (options.serial) {\n          params.push('-set_serial');\n          params.push('0x' + ('00000000' + options.serial.toString(16)).slice(-8));\n        } else {\n          params.push('-CAcreateserial');\n        }\n        if(options.serviceKeyPassword){\n            params.push('-passin');\n            params.push('pass:' + options.serviceKeyPassword);\n        }\n        tmpfiles.push(options.serviceCertificate);\n        tmpfiles.push(options.serviceKey);\n    } else {\n        params.push('-signkey');\n        params.push('--TMPFILE--');\n        if(options.serviceKeyPassword){\n            params.push('-passin');\n            params.push('pass:' + options.serviceKeyPassword);\n        }\n        tmpfiles.push(options.serviceKey);\n    }\n\n    if (options.config) {\n        params.push('-extensions');\n        params.push('v3_req');\n        params.push('-extfile');\n        params.push('--TMPFILE--');\n        tmpfiles.push(options.config);\n    } else if (options.extFile) {\n      params.push('-extfile');\n      params.push(options.extFile);\n    }\n\n    if(options.clientKeyPassword){\n        params.push('-passin');\n        params.push('pass:' + options.clientKeyPassword);\n    }\n\n    execOpenSSL(params, 'CERTIFICATE', tmpfiles, function(error, data) {\n        if (error) {\n            return callback(error);\n        }\n        var response = {\n            csr: options.csr,\n            clientKey: options.clientKey,\n            certificate: data,\n            serviceKey: options.serviceKey\n        };\n        return callback(null, response);\n    });\n}\n\n/**\n * Exports a public key from a private key, CSR or certificate\n *\n * @param {String} certificate PEM encoded private key, CSR or certificate\n * @param {Function} callback Callback function with an error object and {publicKey}\n */\nfunction getPublicKey(certificate, callback) {\n    if (!callback && typeof certificate === 'function') {\n        callback = certificate;\n        certificate = undefined;\n    }\n\n    certificate = (certificate || '').toString();\n\n    var params;\n\n    if (certificate.match(/BEGIN(\\sNEW)? CERTIFICATE REQUEST/)) {\n        params = ['req',\n            '-in',\n            '--TMPFILE--',\n            '-pubkey',\n            '-noout'\n        ];\n    } else if (certificate.match(/BEGIN RSA PRIVATE KEY/)) {\n        params = ['rsa',\n            '-in',\n            '--TMPFILE--',\n            '-pubout'\n        ];\n    } else {\n        params = ['x509',\n            '-in',\n            '--TMPFILE--',\n            '-pubkey',\n            '-noout'\n        ];\n    }\n\n    execOpenSSL(params, 'PUBLIC KEY', certificate, function(error, key) {\n        if (error) {\n            return callback(error);\n        }\n        return callback(null, {\n            publicKey: key\n        });\n    });\n}\n\n/**\n * Reads subject data from a certificate or a CSR\n *\n * @param {String} certificate PEM encoded CSR or certificate\n * @param {Function} callback Callback function with an error object and {country, state, locality, organization, organizationUnit, commonName, emailAddress}\n */\nfunction readCertificateInfo(certificate, callback) {\n    if (!callback && typeof certificate === 'function') {\n        callback = certificate;\n        certificate = undefined;\n    }\n\n    certificate = (certificate || '').toString();\n\n    var type = certificate.match(/BEGIN(\\sNEW)? CERTIFICATE REQUEST/) ? 'req' : 'x509',\n        params = [type,\n            '-noout',\n            '-text',\n            '-in',\n            '--TMPFILE--'\n        ];\n    spawnWrapper(params, certificate, function(err, code, stdout) {\n        if (err) {\n            return callback(err);\n        }\n        return fetchCertificateData(stdout, callback);\n    });\n}\n\n/**\n * get the modulus from a certificate, a CSR or a private key\n *\n * @param {String} certificate PEM encoded, CSR PEM encoded, or private key\n * @param {String} password password for the certificate\n * @param {Function} callback Callback function with an error object and {modulus}\n */\nfunction getModulus(certificate, password, callback) {\n    if (!callback && typeof password === 'function') {\n        callback = password;\n        password = undefined;\n    }\n\n    certificate = Buffer.isBuffer(certificate) && certificate.toString() || certificate;\n\n    var type = '';\n    if (certificate.match(/BEGIN(\\sNEW)? CERTIFICATE REQUEST/)) {\n        type = 'req';\n    } else if (certificate.match(/BEGIN RSA PRIVATE KEY/) || certificate.match(/BEGIN PRIVATE KEY/)) {\n        type = 'rsa';\n    } else {\n        type = 'x509';\n    }\n    var params = [type,\n        '-noout',\n        '-modulus',\n        '-in',\n        '--TMPFILE--'\n    ];\n\n    if (password) {\n        params.push( '-passin');\n        params.push( 'pass:' + password);\n    }\n\n    spawnWrapper(params, certificate, function(err, code, stdout) {\n        if (err) {\n            return callback(err);\n        }\n        var match = stdout.match(/Modulus=([0-9a-fA-F]+)$/m);\n        if (match) {\n            return callback(null, {\n                modulus: match[1]\n            });\n        } else {\n            return callback(new Error('No modulus'));\n        }\n    });\n}\n\n/**\n * get the size and prime of DH parameters\n *\n * @param {String} DH parameters PEM encoded\n * @param {Function} callback Callback function with an error object and {size, prime}\n */\nfunction getDhparamInfo(dh, callback) {\n    dh = Buffer.isBuffer(dh) && dh.toString() || dh;\n\n    var params = [\n        'dh',\n        '-text',\n        '-in',\n        '--TMPFILE--'\n    ];\n\n    spawnWrapper(params, dh, function(err, code, stdout) {\n        if (err) {\n            return callback(err);\n        }\n\n        var result = {};\n        var match = stdout.match(/Parameters: \\((\\d+) bit\\)/);\n\n        if (match) {\n            result.size = Number(match[1]);\n        }\n\n        var prime = '';\n        stdout.split('\\n').forEach(function (line) {\n            if (/\\s+([0-9a-f][0-9a-f]:)+[0-9a-f]?[0-9a-f]?/g.test(line)) {\n                prime += line.trim();\n            }\n        });\n\n        if (prime) {\n            result.prime = prime;\n        }\n\n        if (!match && !prime) {\n            return callback(new Error('No DH info found'));\n        }\n\n        return callback(null, result);\n    });\n}\n\n/**\n * config the pem module\n * @param {Object} options\n */\nfunction config(options) {\n    if (options.pathOpenSSL) {\n        pathOpenSSL = options.pathOpenSSL;\n    }\n}\n\n/**\n * Gets the fingerprint for a certificate\n *\n * @param {String} PEM encoded certificate\n * @param {Function} callback Callback function with an error object and {fingerprint}\n */\nfunction getFingerprint(certificate, hash, callback) {\n\n    if (!callback && typeof hash === 'function') {\n        callback = hash;\n        hash = undefined;\n    }\n\n    hash = hash || 'sha1';\n\n    var params = ['x509',\n        '-in',\n        '--TMPFILE--',\n        '-fingerprint',\n        '-noout',\n        '-' + hash\n    ];\n\n    spawnWrapper(params, certificate, function(err, code, stdout) {\n        if (err) {\n            return callback(err);\n        }\n        var match = stdout.match(/Fingerprint=([0-9a-fA-F:]+)$/m);\n        if (match) {\n            return callback(null, {\n                fingerprint: match[1]\n            });\n        } else {\n            return callback(new Error('No fingerprint'));\n        }\n    });\n}\n\n/**\n * Export private key and certificate to a PKCS12 keystore\n *\n * @param {String} PEM encoded private key\n * @param {String} PEM encoded certificate\n * @param {String} Password of the result PKCS12 file\n * @param {Object} [options] object of cipher and optional client key password {cipher:'aes128', clientKeyPassword: 'xxx'}\n * @param {Function} callback Callback function with an error object and {pkcs12}\n */\nfunction createPkcs12(key, certificate, password, options, callback) {\n    if (!callback && typeof options === 'function') {\n        callback = options;\n        options = {};\n    }\n\n    var params = ['pkcs12','-export'];\n    var cipher = ['aes128', 'aes192', 'aes256', 'camellia128', 'camellia192', 'camellia256', 'des', 'des3', 'idea'];\n    if (options && options.cipher && ( -1 !== Number(cipher.indexOf(options.cipher)) )){\n        params.push( '-' + options.cipher );\n    }\n    if(options && options.clientKeyPassword){\n        params.push('-passin');\n        params.push('pass:' + options.clientKeyPassword);\n    }\n    params.push( '-password' );\n    params.push( 'pass:' + password );\n\n    params.push( '-in' );\n    params.push('--TMPFILE--');\n    params.push( '-inkey' );\n    params.push('--TMPFILE--');\n\n    var tmpfiles = [certificate, key];\n\n    if (options && options.certFiles) {\n      tmpfiles.push(options.certFiles.join(''));\n\n      params.push( '-certfile' );\n      params.push('--TMPFILE--');\n    }\n\n    execBinaryOpenSSL(params, tmpfiles, function(error, pkcs12) {\n        if (error) {\n            return callback(error);\n        }\n        return callback(null, {\n            pkcs12: pkcs12\n        });\n    });\n}\n\nfunction readPkcs12(bufferOrPath, options, callback) {\n  if (!callback && typeof options === 'function') {\n      callback = options;\n      options = {};\n  }\n\n  options.p12Password = options.p12Password || '';\n\n  var tmpfiles = [];\n  var args = ['pkcs12', '-in', bufferOrPath, '-passin', 'pass:' + options.p12Password];\n\n  if (Buffer.isBuffer(bufferOrPath)) {\n    tmpfiles = [bufferOrPath];\n    args[2] = '--TMPFILE--';\n  }\n\n  if (options.clientKeyPassword) {\n    args.push('-passout');\n    args.push('pass:' + options.clientKeyPassword);\n  } else {\n    args.push('-nodes');\n  }\n\n  execBinaryOpenSSL(args, tmpfiles, function (error, stdout) {\n    var keybundle = {};\n\n    if (error && error.message.indexOf('No such file or directory') !== -1) {\n      error.code = 'ENOENT';\n    }\n\n    if (!error) {\n      var certs = readFromString(stdout, CERT_START, CERT_END);\n      keybundle.cert = certs.shift();\n      keybundle.ca = certs;\n      keybundle.key = readFromString(stdout, KEY_START, KEY_END).pop();\n\n      if (keybundle.key) {\n        // convert to RSA key\n        return execOpenSSL(['rsa', '-in', '--TMPFILE--'], 'RSA PRIVATE KEY', [keybundle.key], function (error, key) {\n          keybundle.key = key;\n\n          return callback(error, keybundle);\n        });\n      }\n\n      if (options.clientKeyPassword) {\n        keybundle.key = readFromString(stdout, ENCRYPTED_KEY_START, ENCRYPTED_KEY_END).pop();\n      } else {\n        keybundle.key = readFromString(stdout, RSA_KEY_START, RSA_KEY_END).pop();\n      }\n    }\n\n    return callback(error, keybundle);\n  });\n}\n\n/**\n * Verifies the signing chain of the passed certificate\n *\n * @param {String} PEM encoded certificate\n * @param {Array} List of CA certificates\n * @param {Function} callback Callback function with an error object and a boolean valid\n */\nfunction verifySigningChain(certificate, ca, callback) {\n    if (!Array.isArray(ca)) {\n        ca = [ca];\n    }\n\n    var files = [\n      ca.join('\\n'),\n      certificate\n    ];\n\n    var params = ['verify',\n        '-CAfile',\n        '--TMPFILE--',\n        '--TMPFILE--'\n    ];\n\n    spawnWrapper(params, files, function(err, code, stdout) {\n        if (err) {\n            return callback(err);\n        }\n\n        callback(null, stdout.trim().slice(-4) === ': OK');\n    });\n}\n\n// HELPER FUNCTIONS\n\nfunction fetchCertificateData(certData, callback) {\n    certData = (certData || '').toString();\n    var serial, subject, subject2, extra, tmp, issuer, issuer2, certValues = {issuer:{}};\n    var validity = {};\n    var san;\n\n    if ((serial = certData.match(/Serial Number:\\s*([^\\n]*)\\n/)) && serial.length > 1) {\n        certValues.serial = serial[1];\n    }\n\n    if ((subject = certData.match(/Subject:([^\\n]*)\\n/)) && subject.length > 1) {\n        subject2 = linebrakes(subject[1] + '\\n');\n        subject = subject[1];\n        extra = subject.split('/');\n        subject = extra.shift() + '\\n';\n        extra = extra.join('/') + '\\n';\n\n        // country\n        tmp = subject2.match(/\\sC=([^\\n].*?)[\\n]/);\n        certValues.country = tmp && tmp[1] || '';\n        // state\n        tmp = subject2.match(/\\sST=([^\\n].*?)[\\n]/);\n        certValues.state = tmp && tmp[1] || '';\n        // locality\n        tmp = subject2.match(/\\sL=([^\\n].*?)[\\n]/);\n        certValues.locality = tmp && tmp[1] || '';\n        // organization\n        tmp = subject2.match(/\\sO=([^\\n].*?)[\\n]/);\n        certValues.organization = tmp && tmp[1] || '';\n        // unit\n        tmp = subject2.match(/\\sOU=([^\\n].*?)[\\n]/);\n        certValues.organizationUnit = tmp && tmp[1] || '';\n        // common name\n        tmp = subject2.match(/\\sCN=([^\\n].*?)[\\n]/);\n        certValues.commonName = tmp && tmp[1] || '';\n        //email\n        tmp = extra.match(/emailAddress=([^\\n\\/].*?)[\\n\\/]/);\n        certValues.emailAddress = tmp && tmp[1] || '';\n        // DC name\n        tmp = subject2.match(/\\sDC=([^\\n].*?)[\\n]/);\n        certValues.dc = tmp && tmp[1] || '';\n    }\n\n    if ((issuer = certData.match(/Issuer:([^\\n]*)\\n/)) && issuer.length > 1) {\n        issuer2 = linebrakes(issuer[1] + '\\n');\n        issuer = issuer[1];\n        // country\n        tmp = issuer2.match(/\\sC=([^\\n].*?)[\\n]/);\n        certValues.issuer.country = tmp && tmp[1] || '';\n        // state\n        tmp = issuer2.match(/\\sST=([^\\n].*?)[\\n]/);\n        certValues.issuer.state = tmp && tmp[1] || '';\n        // locality\n        tmp = issuer2.match(/\\sL=([^\\n].*?)[\\n]/);\n        certValues.issuer.locality = tmp && tmp[1] || '';\n        // organization\n        tmp = issuer2.match(/\\sO=([^\\n].*?)[\\n]/);\n        certValues.issuer.organization = tmp && tmp[1] || '';\n        // unit\n        tmp = issuer2.match(/\\sOU=([^\\n].*?)[\\n]/);\n        certValues.issuer.organizationUnit = tmp && tmp[1] || '';\n        // common name\n        tmp = issuer2.match(/\\sCN=([^\\n].*?)[\\n]/);\n        certValues.issuer.commonName = tmp && tmp[1] || '';\n        // DC\n        tmp = issuer2.match(/\\sDC=([^\\n].*?)[\\n]/);\n        certValues.issuer.dc = tmp && tmp[1] || '';\n    }\n\n    if ((san = certData.match(/X509v3 Subject Alternative Name: \\n([^\\n]*)\\n/)) && san.length > 1) {\n        san = san[1].trim() + '\\n';\n        certValues.san = {};\n        // country\n        tmp = preg_match_all('DNS:([^,\\\\n].*?)[,\\\\n]', san);\n        certValues.san.dns = tmp || '';\n        // country\n        tmp = preg_match_all('IP Address:([^,\\\\n].*?)[,\\\\n\\\\s]', san);\n        certValues.san.ip = tmp || '';\n    }\n\n    if ((tmp = certData.match(/Not Before\\s?:\\s?([^\\n]*)\\n/)) && tmp.length > 1) {\n        validity.start = Date.parse(tmp && tmp[1] || '');\n    }\n\n    if ((tmp = certData.match(/Not After\\s?:\\s?([^\\n]*)\\n/)) && tmp.length > 1) {\n        validity.end = Date.parse(tmp && tmp[1] || '');\n    }\n\n    if (validity.start && validity.end) {\n        certValues.validity = validity;\n    }\n    callback(null, certValues);\n}\n\n\nfunction linebrakes(content) {\n    var helper_x, subject, type;\n    helper_x = content.replace(/(C|L|O|OU|ST|CN|DC)=/g, '\\n$1=');\n    helper_x = preg_match_all('((C|L|O|OU|ST|CN|DC)=[^\\n].*)', helper_x);\n    for (var p=0; p<helper_x.length; p++) {\n        subject = helper_x[p].trim();\n        type = subject.split('=');\n        if(type[1].substring(0, 4) !== 'http'){\n            content = subject.split('/');\n        }else{\n            content = [];\n            content.push(subject);\n        }\n        subject = content.shift();\n        helper_x[p] = rtrim(subject, ',');\n    }\n    return ' ' + helper_x.join('\\n') + '\\n';\n}\n\nfunction rtrim(str, charlist) {\n    charlist = !charlist ? ' \\\\s\\u00A0' : (charlist + '')\n        .replace(/([\\[\\]\\(\\)\\.\\?\\/\\*\\{\\}\\+\\$\\^\\:])/g, '\\\\$1');\n    var re = new RegExp('[' + charlist + ']+$', 'g');\n    return (str + '')\n        .replace(re, '');\n}\n\nfunction preg_match_all(regex, haystack) {\n    var globalRegex = new RegExp(regex, 'g');\n    var globalMatch = haystack.match(globalRegex) || [];\n    var matchArray = [],\n        nonGlobalRegex, nonGlobalMatch;\n    for (var i=0; i<globalMatch.length; i++) {\n        nonGlobalRegex = new RegExp(regex);\n        nonGlobalMatch = globalMatch[i].match(nonGlobalRegex);\n        matchArray.push(nonGlobalMatch[1]);\n    }\n    return matchArray;\n}\n\nfunction generateCSRSubject(options) {\n\n    options = options || {};\n\n    var csrData = {\n            C: options.country || options.C,\n            ST: options.state || options.ST,\n            L: options.locality || options.L,\n            O: options.organization || options.O,\n            OU: options.organizationUnit || options.OU,\n            CN: options.commonName || options.CN || 'localhost',\n            DC: options.dc || options.DC || '',\n            emailAddress: options.emailAddress\n    };\n\n    var csrBuilder = Object.keys(csrData).map(function(key) {\n        if (csrData[key]) {\n            return '/' + key + '=' + csrData[key].replace(/[^\\w \\.\\*\\-\\,@']+/g, ' ').trim();\n        }\n    });\n\n    return csrBuilder.join('');\n}\n\nfunction readFromString(string, start, end) {\n  if (Buffer.isBuffer(string)) {\n    string = string.toString('utf8');\n  }\n\n  var output = [];\n\n  if (!string) {\n    return output;\n  }\n\n  var offset = string.indexOf(start);\n\n  while (offset !== -1) {\n    string = string.substring(offset);\n\n    var endOffset = string.indexOf(end);\n\n    if (endOffset === -1) {\n      break;\n    }\n\n    endOffset += end.length;\n\n    output.push(string.substring(0, endOffset));\n    offset = string.indexOf(start, endOffset);\n  }\n\n  return output;\n}\n\n/**\n * Generically spawn openSSL, without processing the result\n *\n * @param {Array}        params   The parameters to pass to openssl\n * @param {Boolean}      binary   Output of openssl is binary or text\n * @param {Function}     callback Called with (error, exitCode, stdout, stderr)\n */\nfunction spawnOpenSSL(params, binary, callback) {\n    var pathBin = pathOpenSSL || process.env.OPENSSL_BIN || 'openssl';\n\n    testOpenSSLPath(pathBin, function(err) {\n        if (err) {\n            return callback(err);\n        }\n        var openssl = spawn(pathBin, params),\n            stderr = '';\n\n        var stdout = (binary ? new Buffer(0) : '');\n        openssl.stdout.on('data', function(data) {\n            if(!binary){\n                stdout += (data || '').toString('binary');\n            }\n            else{\n                stdout = Buffer.concat([stdout, data]);\n            }\n        });\n\n        openssl.stderr.on('data', function(data) {\n            stderr += (data || '').toString('binary');\n        });\n        // We need both the return code and access to all of stdout.  Stdout isn't\n        // *really* available until the close event fires; the timing nuance was\n        // making this fail periodically.\n        var needed = 2; // wait for both exit and close.\n        var code = -1;\n        var finished = false;\n        var done = function(err) {\n            if (finished) {\n                return;\n            }\n\n            if (err) {\n                finished = true;\n                return callback(err);\n            }\n\n            if (--needed < 1) {\n                finished = true;\n                if (code) {\n                    callback(new Error('Invalid openssl exit code: ' + code + '\\n% openssl ' + params.join(' ') + '\\n' + stderr), code);\n                } else {\n                    callback(null, code, stdout, stderr);\n                }\n            }\n        };\n\n        openssl.on('error', done);\n\n        openssl.on('exit', function(ret) {\n            code = ret;\n            done();\n        });\n\n        openssl.on('close', function() {\n            stdout = (binary ? stdout : new Buffer(stdout, 'binary').toString('utf-8'));\n            stderr = new Buffer(stderr, 'binary').toString('utf-8');\n            done();\n        });\n    });\n}\n\nfunction spawnWrapper(params, tmpfiles, binary, callback) {\n    if (!callback && typeof binary === 'function') {\n        callback = binary;\n        binary = false;\n    }\n\n    var files = [];\n\n    if (tmpfiles) {\n        tmpfiles = [].concat(tmpfiles || []);\n        params.forEach(function(value, i) {\n            var fpath;\n            if (value === '--TMPFILE--') {\n                fpath = pathlib.join(tempDir, crypto.randomBytes(20).toString('hex'));\n                files.push({\n                    path: fpath,\n                    contents: tmpfiles.shift()\n                });\n                params[i] = fpath;\n            }\n        });\n    }\n\n    files.forEach(function(file) {\n        fs.writeFileSync(file.path, file.contents);\n    });\n\n    spawnOpenSSL(params, binary, function(err, code, stdout, stderr) {\n        files.forEach(function(file) {\n            fs.unlinkSync(file.path);\n        });\n        callback(err, code, stdout, stderr);\n    });\n}\n\n/**\n * Spawn an openssl command\n */\nfunction execOpenSSL(params, searchStr, tmpfiles, callback) {\n    if (!callback && typeof tmpfiles === 'function') {\n        callback = tmpfiles;\n        tmpfiles = false;\n    }\n\n    spawnWrapper(params, tmpfiles, function(err, code, stdout, stderr) {\n        var start, end;\n\n        if (err) {\n            return callback(err);\n        }\n\n        if ((start = stdout.match(new RegExp('\\\\-+BEGIN ' + searchStr + '\\\\-+$', 'm')))) {\n            start = start.index;\n        } else {\n            start = -1;\n        }\n\n        if ((end = stdout.match(new RegExp('^\\\\-+END ' + searchStr + '\\\\-+', 'm')))) {\n            end = end.index + (end[0] || '').length;\n        } else {\n            end = -1;\n        }\n\n        if (start >= 0 && end >= 0) {\n            return callback(null, stdout.substring(start, end));\n        } else {\n            return callback(new Error(searchStr + ' not found from openssl output:\\n---stdout---\\n' + stdout + '\\n---stderr---\\n' + stderr + '\\ncode: ' + code));\n        }\n    });\n}\n\n/**\n *  Spawn an openssl command and get binary output\n **/\n function execBinaryOpenSSL(params, tmpfiles, callback){\n    if (!callback && typeof tmpfiles === 'function') {\n        callback = tmpfiles;\n        tmpfiles = false;\n    }\n    spawnWrapper(params, tmpfiles, true, function(err, code, stdout) {\n        if(err) {\n            return callback(err);\n        }\n        return callback(null, stdout);\n    });\n }\n\n/**\n * Validates the pathBin for the openssl command.\n *\n * @param {String} pathBin The path to OpenSSL Bin\n * @param {Function} callback Callback function with an error object\n */\nfunction testOpenSSLPath(pathBin, callback) {\n    which(pathBin, function(error) {\n        if (error) {\n            return callback(new Error('Could not find openssl on your system on this path: ' + pathBin));\n        }\n\n        callback();\n    });\n}\n","/home/travis/build/npmtest/node-npmtest-pem/node_modules/pem/Gruntfile.js":"'use strict';\n\nmodule.exports = function(grunt) {\n    // Project configuration.\n    grunt.initConfig({\n        jshint: {\n            all: ['lib/*.js', 'test/*.js', 'Gruntfile.js'],\n            options: {\n                jshintrc: '.jshintrc'\n            }\n        },\n\n        nodeunit: {\n            all: 'test/pem.js'\n        }\n    });\n\n    // Load the plugin(s)\n    grunt.loadNpmTasks('grunt-contrib-jshint');\n    grunt.loadNpmTasks('grunt-contrib-nodeunit');\n\n    // Tasks\n    grunt.registerTask('default', ['jshint', 'nodeunit']);\n};"}